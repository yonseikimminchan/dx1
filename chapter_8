# (1) 데이터 다운로드 및 폴더 생성
# cloud shell 에서 다음 명령어를 실행
# $ mkdir -p ~/aiffel/bike-sharing-demand
# $ ln -s ~/data/data/bike-sharing-demand/* ~/aiffel/bike-sharing-demand

# (2) pandas 불러오기
import pandas as pd

# 데이터 경로와 train 데이터 불러오기
data_path = "~/aiffel/bike-sharing-demand/train.csv"
train = pd.read_csv(data_path)

# (3) datetime 컬럼 변환 및 연, 월, 일, 시, 분, 초 추출
train['datetime'] = pd.to_datetime(train['datetime'])
train['year'] = train['datetime'].dt.year
train['month'] = train['datetime'].dt.month
train['day'] = train['datetime'].dt.day
train['hour'] = train['datetime'].dt.hour
train['minute'] = train['datetime'].dt.minute
train['second'] = train['datetime'].dt.second

# (4) year, month, day, hour, minute, second 데이터 시각화
import seaborn as sns
from matplotlib import pyplot as plt

fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()
fig.suptitle('Time Count Visualization', fontsize=16)

columns = ['year', 'month', 'day', 'hour', 'minute', 'second']
titles = ['Year', 'Month', 'Day', 'Hour', 'Minute', 'Second']

for i, col in enumerate(columns):
    sns.countplot(data=train, x=col, ax=axes[i])
    axes[i].set_title(f'{titles[i]} Count')

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

# (5) X, y 컬럼 선택 및 train/test 데이터 분리
X = train.drop(['datetime', 'count'], axis=1)  # datetime, count 열 제거
y = train['count']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)

# (6) LinearRegression 모델 학습
from sklearn.linear_model import LinearRegression
reg = LinearRegression()

# 학습 데이터로 모델 학습
reg.fit(X_train, y_train)

# (7) 학습된 모델로 X_test에 대한 예측값 출력 및 손실함수값 계산
y_pred = reg.predict(X_test)
print(y_pred)

# MSE와 RMSE 계산
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
print(f"MSE: {mse}, RMSE: {rmse}")

# (8) x축은 temp 또는 humidity로, y축은 count로 예측 결과 시각화
plt.figure(figsize=(12, 6))

# temp와 count 시각화
plt.subplot(1, 2, 1)
plt.scatter(X_test['temp'], y_pred, color='red', s=2, label='Predicted')
plt.scatter(X_test['temp'], y_test, color='blue', s=1.1, label='Actual')
plt.title('Temp vs Count')
plt.xlabel('Temperature')
plt.ylabel('Count')
plt.legend()

# humidity와 count 시각화
plt.subplot(1, 2, 2)
plt.scatter(X_test['humidity'], y_pred, color='red', s=2, label='Predicted')
plt.scatter(X_test['humidity'], y_test, color='blue', s=1.1, label='Actual')
plt.title('Humidity vs Count')
plt.xlabel('Humidity')
plt.ylabel('Count')
plt.legend()

plt.tight_layout()
plt.show()
